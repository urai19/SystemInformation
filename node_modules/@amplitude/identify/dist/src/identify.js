Object.defineProperty(exports, "__esModule", { value: true });
exports.Identify = void 0;
var tslib_1 = require("tslib");
var types_1 = require("@amplitude/types");
var utils_1 = require("@amplitude/utils");
var constants_1 = require("./constants");
// A specific helper for the identify field
var identifyWarn = function (operation) {
    var msgs = [];
    for (var _i = 1; _i < arguments.length; _i++) {
        msgs[_i - 1] = arguments[_i];
    }
    return utils_1.logger.warn.apply(utils_1.logger, tslib_1.__spread(['On Identify operation ', operation, ': '], msgs));
};
var Identify = /** @class */ (function () {
    function Identify() {
        // The set of operations that have been added to this identify
        this._propertySet = new Set();
        this._properties = {};
        this._groups = {};
    }
    /** Create a user identify event out of this identify */
    Identify.prototype.identifyUser = function (userId, deviceId) {
        if (deviceId === void 0) { deviceId = null; }
        var identifyEvent = {
            event_type: types_1.SpecialEventType.IDENTIFY,
            groups: tslib_1.__assign({}, this._groups),
            user_properties: this.getUserProperties(),
        };
        var hasUserId = false;
        var hasDeviceId = false;
        if (typeof userId === 'string' && userId.length > 0) {
            hasUserId = true;
            identifyEvent.user_id = userId;
        }
        if (typeof deviceId === 'string' && deviceId.length > 0) {
            hasDeviceId = true;
            identifyEvent.device_id = deviceId;
        }
        if (!hasUserId && !hasDeviceId) {
            utils_1.logger.warn('Creating identify event without device or user ID - this event will be rejected unless one is attached');
        }
        return identifyEvent;
    };
    Identify.prototype.identifyGroup = function (groupName, groupValue) {
        var _a;
        var identifyEvent = {
            event_type: types_1.SpecialEventType.GROUP_IDENTIFY,
            groups: (_a = {}, _a[groupName] = groupValue, _a),
            group_properties: this.getGroupUserProperties(),
            device_id: utils_1.generateBase36Id(),
        };
        return identifyEvent;
    };
    Identify.prototype.getUserProperties = function () {
        var e_1, _a;
        var userPropertiesCopy = {};
        try {
            for (var USER_IDENTIFY_OPERATIONS_1 = tslib_1.__values(constants_1.USER_IDENTIFY_OPERATIONS), USER_IDENTIFY_OPERATIONS_1_1 = USER_IDENTIFY_OPERATIONS_1.next(); !USER_IDENTIFY_OPERATIONS_1_1.done; USER_IDENTIFY_OPERATIONS_1_1 = USER_IDENTIFY_OPERATIONS_1.next()) {
                var field = USER_IDENTIFY_OPERATIONS_1_1.value;
                if (field in this._properties) {
                    userPropertiesCopy[field] = this._properties[field];
                }
            }
        }
        catch (e_1_1) { e_1 = { error: e_1_1 }; }
        finally {
            try {
                if (USER_IDENTIFY_OPERATIONS_1_1 && !USER_IDENTIFY_OPERATIONS_1_1.done && (_a = USER_IDENTIFY_OPERATIONS_1.return)) _a.call(USER_IDENTIFY_OPERATIONS_1);
            }
            finally { if (e_1) throw e_1.error; }
        }
        return userPropertiesCopy;
    };
    Identify.prototype.getGroupUserProperties = function () {
        var e_2, _a;
        var userPropertiesCopy = {};
        try {
            for (var GROUP_IDENTIFY_OPERATIONS_1 = tslib_1.__values(constants_1.GROUP_IDENTIFY_OPERATIONS), GROUP_IDENTIFY_OPERATIONS_1_1 = GROUP_IDENTIFY_OPERATIONS_1.next(); !GROUP_IDENTIFY_OPERATIONS_1_1.done; GROUP_IDENTIFY_OPERATIONS_1_1 = GROUP_IDENTIFY_OPERATIONS_1.next()) {
                var field = GROUP_IDENTIFY_OPERATIONS_1_1.value;
                if (field in this._properties) {
                    userPropertiesCopy[field] = this._properties[field];
                }
            }
        }
        catch (e_2_1) { e_2 = { error: e_2_1 }; }
        finally {
            try {
                if (GROUP_IDENTIFY_OPERATIONS_1_1 && !GROUP_IDENTIFY_OPERATIONS_1_1.done && (_a = GROUP_IDENTIFY_OPERATIONS_1.return)) _a.call(GROUP_IDENTIFY_OPERATIONS_1);
            }
            finally { if (e_2) throw e_2.error; }
        }
        return userPropertiesCopy;
    };
    Identify.prototype.setGroup = function (groupName, groupValue) {
        var isSuccessfulSet = this._safeSet(types_1.IdentifyOperation.SET, groupName, groupValue);
        if (isSuccessfulSet) {
            this._groups[groupName] = groupValue;
        }
        return this;
    };
    Identify.prototype.set = function (property, value) {
        this._safeSet(types_1.IdentifyOperation.SET, property, value);
        return this;
    };
    Identify.prototype.setOnce = function (property, value) {
        this._safeSet(types_1.IdentifyOperation.SET_ONCE, property, value);
        return this;
    };
    Identify.prototype.append = function (property, value) {
        this._safeSet(types_1.IdentifyOperation.APPEND, property, value);
        return this;
    };
    Identify.prototype.prepend = function (property, value) {
        this._safeSet(types_1.IdentifyOperation.PREPEND, property, value);
        return this;
    };
    Identify.prototype.postInsert = function (property, value) {
        this._safeSet(types_1.IdentifyOperation.POSTINSERT, property, value);
        return this;
    };
    Identify.prototype.preInsert = function (property, value) {
        this._safeSet(types_1.IdentifyOperation.PREINSERT, property, value);
        return this;
    };
    Identify.prototype.remove = function (property, value) {
        this._safeSet(types_1.IdentifyOperation.REMOVE, property, value);
        return this;
    };
    Identify.prototype.add = function (property, value) {
        this._safeSet(types_1.IdentifyOperation.ADD, property, value);
        return this;
    };
    Identify.prototype.unset = function (property) {
        this._safeSet(types_1.IdentifyOperation.UNSET, property, constants_1.UNSET_VALUE);
        return this;
    };
    Identify.prototype.clearAll = function () {
        // When clear all happens, all properties are unset. Reset the entire object.
        this._properties = {};
        this._properties[types_1.IdentifyOperation.CLEAR_ALL] = constants_1.UNSET_VALUE;
        return this;
    };
    // Returns whether or not this set actually worked.
    Identify.prototype._safeSet = function (operation, property, value) {
        if (this._validate(operation, property, value)) {
            var userPropertyMap = this._properties[operation];
            if (userPropertyMap === undefined) {
                userPropertyMap = {};
                this._properties[operation] = userPropertyMap;
            }
            userPropertyMap[property] = value;
            this._propertySet.add(property);
            return true;
        }
        return false;
    };
    Identify.prototype._validate = function (operation, property, value) {
        if (this._properties[types_1.IdentifyOperation.CLEAR_ALL] !== undefined) {
            identifyWarn(operation, 'clear all already set. Skipping operation');
            return false;
        }
        if (this._propertySet.has(property)) {
            identifyWarn(operation, 'property ', property, ' already used. Skipping operation');
            return false;
        }
        if (operation === types_1.IdentifyOperation.ADD) {
            return typeof value === 'number';
        }
        else if (operation !== types_1.IdentifyOperation.UNSET && operation !== types_1.IdentifyOperation.REMOVE) {
            return utils_1.isValidProperties(property, value);
        }
        return true;
    };
    return Identify;
}());
exports.Identify = Identify;
//# sourceMappingURL=identify.js.map