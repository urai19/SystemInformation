import { Event, Options, Payload, Response } from '@amplitude/types';
import { BaseRetryHandler } from './baseRetry';
/**
 * A retry handler made specifically to handle a strategy where
 * the server network connection is not always available. (e.g. executing node code on a client device).
 * Instead of retrying events on a loop, this will save untried events
 */
export declare class OfflineRetryHandler extends BaseRetryHandler {
    private _eventsToRetry;
    private readonly _requestQueue;
    constructor(apiKey: string, options?: Partial<Options>);
    /**
     * @inheritDoc
     */
    sendEventsWithRetry(events: readonly Event[]): Promise<Response>;
    protected _getPayload(events: readonly Event[]): Payload;
    private _onSendSuccess;
    private _onSendError;
}
//# sourceMappingURL=offlineRetry.d.ts.map