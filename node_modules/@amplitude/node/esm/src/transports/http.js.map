{"version":3,"file":"http.js","sourceRoot":"","sources":["../../../src/transports/http.ts"],"names":[],"mappings":"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","sourcesContent":["import { Options, Payload, Response, Status, Transport, TransportOptions } from '@amplitude/types';\nimport { AsyncQueue, mapJSONToResponse, mapHttpMessageToResponse } from '@amplitude/utils';\n\nimport * as http from 'http';\nimport * as https from 'https';\nimport { REQUEST_TIMEOUT_MILLIS_DEFAULT } from '../constants';\nimport * as url from 'url';\n\n/**\n * Internal used interface for typescript.\n * @hidden\n */\nexport interface HTTPRequest {\n  /**\n   * Request wrapper\n   * @param options These are {@see TransportOptions}\n   * @param callback Callback when request is finished\n   */\n  request(\n    options: http.RequestOptions | https.RequestOptions | string | url.URL,\n    callback?: (res: http.IncomingMessage) => void,\n  ): http.ClientRequest;\n}\n\n/** Base Transport class implementation */\nexport class HTTPTransport implements Transport {\n  /** The Agent used for corresponding transport */\n  public module: HTTPRequest;\n\n  protected _uploadInProgress = false;\n  protected _requestQueue: AsyncQueue = new AsyncQueue();\n\n  /** Create instance and set this.dsn */\n  public constructor(public options: TransportOptions) {\n    this.options = options;\n    if (options.serverUrl.startsWith('http://')) {\n      this.module = http;\n    } else if (options.serverUrl.startsWith('https://')) {\n      this.module = https;\n    } else {\n      throw new Error('Invalid server url');\n    }\n  }\n\n  /**\n   * @inheritDoc\n   */\n  public async sendPayload(payload: Payload, limitInMs?: number): Promise<Response> {\n    const timeoutMS = limitInMs ?? this.options.requestTimeoutMillis ?? REQUEST_TIMEOUT_MILLIS_DEFAULT;\n    const call = async (): Promise<Response> => await this._sendWithModule(payload, timeoutMS);\n\n    // Queue up the call to send the payload.\n    // Wait 10 seconds for each request in queue before removing it\n    return await this._requestQueue.addToQueue(call);\n  }\n\n  /** Returns a build request option object used by request */\n  protected _getRequestOptions(): http.RequestOptions | https.RequestOptions {\n    const headers = {\n      ...this.options.headers,\n    };\n\n    const url = new URL(this.options.serverUrl);\n    const options: {\n      [key: string]: any;\n    } = {\n      headers,\n      method: 'POST',\n      hostname: url.hostname,\n      port: url.port,\n      path: url.pathname,\n    };\n\n    return options;\n  }\n\n  /** JSDoc */\n  protected async _sendWithModule(payload: Payload, limitInMs: number): Promise<Response> {\n    return await new Promise<Response>((resolve, reject) => {\n      let timeoutId: NodeJS.Timeout;\n      const req = this.module.request(this._getRequestOptions(), (res: http.IncomingMessage) => {\n        res.setEncoding('utf8');\n        let rawData = '';\n        // Collect the body data from the response\n        res.on('data', (chunk: string) => {\n          rawData += chunk;\n        });\n        // On completion, parse the data and resolve.\n        res.on('end', () => {\n          if (timeoutId !== undefined) {\n            clearTimeout(timeoutId);\n          }\n          if (res.complete && rawData.length > 0) {\n            try {\n              const responseWithBody = mapJSONToResponse(JSON.parse(rawData));\n              if (responseWithBody !== null) {\n                return resolve(responseWithBody);\n              }\n            } catch {\n              // pass\n            }\n          }\n\n          // Fallback: get the response object directly from the incoming message\n          resolve(mapHttpMessageToResponse(res));\n        });\n      });\n      // set timeout within promise so that it can resolve itself if time is exceeded\n      if (limitInMs > 0) {\n        timeoutId = setTimeout(() => {\n          req.destroy();\n          resolve({ status: Status.Timeout, statusCode: 0 });\n        }, limitInMs);\n      }\n      req.on('error', reject);\n      req.end(JSON.stringify(payload));\n    });\n  }\n}\n\nexport const setupDefaultTransport = (options: Options): Transport => {\n  const transportOptions: TransportOptions = {\n    serverUrl: options.serverUrl,\n    headers: {\n      'Content-Type': 'application/json',\n    },\n    requestTimeoutMillis: options.requestTimeoutMillis,\n  };\n  return new HTTPTransport(transportOptions);\n};\n"]}