/// <reference types="node" />
import { Options, Payload, Response, Transport, TransportOptions } from '@amplitude/types';
import { AsyncQueue } from '@amplitude/utils';
import * as http from 'http';
import * as https from 'https';
import * as url from 'url';
/**
 * Internal used interface for typescript.
 * @hidden
 */
export interface HTTPRequest {
    /**
     * Request wrapper
     * @param options These are {@see TransportOptions}
     * @param callback Callback when request is finished
     */
    request(options: http.RequestOptions | https.RequestOptions | string | url.URL, callback?: (res: http.IncomingMessage) => void): http.ClientRequest;
}
/** Base Transport class implementation */
export declare class HTTPTransport implements Transport {
    options: TransportOptions;
    /** The Agent used for corresponding transport */
    module: HTTPRequest;
    protected _uploadInProgress: boolean;
    protected _requestQueue: AsyncQueue;
    /** Create instance and set this.dsn */
    constructor(options: TransportOptions);
    /**
     * @inheritDoc
     */
    sendPayload(payload: Payload, limitInMs?: number): Promise<Response>;
    /** Returns a build request option object used by request */
    protected _getRequestOptions(): http.RequestOptions | https.RequestOptions;
    /** JSDoc */
    protected _sendWithModule(payload: Payload, limitInMs: number): Promise<Response>;
}
export declare const setupDefaultTransport: (options: Options) => Transport;
//# sourceMappingURL=http.d.ts.map