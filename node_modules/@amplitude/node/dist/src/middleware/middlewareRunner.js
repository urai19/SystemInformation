Object.defineProperty(exports, "__esModule", { value: true });
exports.MiddlewareRunner = void 0;
var MiddlewareRunner = /** @class */ (function () {
    function MiddlewareRunner() {
        this._middlewares = [];
    }
    /**
     * Add a @middleware to the chain.
     *
     * The provided middleware must call next(payload) for the chain to continue.
     * Otherwise any following middleware and next method will not be called.
     *
     * @param middleware A Middleware function
     */
    MiddlewareRunner.prototype.add = function (middleware) {
        this._middlewares.push(middleware);
    };
    /**
     * Runs the middleware chain with the given payload.
     *
     * @param payload The payload data for the middleware to receive
     * @param next The function to call after all middleware completes. Only runs if next(payload) is called by all middlewares.
     */
    MiddlewareRunner.prototype.run = function (payload, next) {
        var _this = this;
        var curMiddlewareIndex = -1;
        var middlewareCount = this._middlewares.length;
        var middlewareNext = function (curPayload) {
            curMiddlewareIndex += 1;
            if (curMiddlewareIndex < middlewareCount) {
                _this._middlewares[curMiddlewareIndex](curPayload, _next);
            }
            else {
                next(curPayload);
            }
        };
        var _next = middlewareCount > 0 ? middlewareNext : next;
        _next(payload);
    };
    return MiddlewareRunner;
}());
exports.MiddlewareRunner = MiddlewareRunner;
//# sourceMappingURL=middlewareRunner.js.map