import { Identify } from '@amplitude/identify';
import { Client, Event, Middleware, MiddlewareExtra, Options, Response } from '@amplitude/types';
export declare class NodeClient implements Client<Options> {
    /** Project Api Key */
    protected readonly _apiKey: string;
    /** Options for the client. */
    protected readonly _options: Options;
    private _events;
    private _responseListeners;
    private readonly _transportWithRetry;
    private _flushTimer;
    private readonly _middlewareRunner;
    /**
     * Initializes this client instance.
     *
     * @param apiKey API key for your project
     * @param options options for the client
     */
    constructor(apiKey: string, options?: Partial<Options>);
    /**
     * @inheritDoc
     */
    getOptions(): Options;
    /**
     * @inheritDoc
     */
    flush(): Promise<Response>;
    /**
     * @inheritDoc
     */
    logEvent(event: Event, extra?: MiddlewareExtra): Promise<Response>;
    /**
     * Sends an identify request for a specific user and device ID, given an identify event.
     * Functionally similar to calling logEvent on an event created by the identify object
     *
     * @param userId the user ID that user properties are being attached to
     * @param deviceId the device ID that user properties are being attached to.
     * @param identify the Identify instance containing user property information
     * @returns a Promise containing metadata about the success of sending this identify to the Amplitude API
     */
    identify(userId: string | null, deviceId: string | null, identify: Identify): Promise<Response>;
    addEventMiddleware(middleware: Middleware): NodeClient;
    /** Add platform dependent field onto event. */
    private _annotateEvent;
    /** Merge plan field into event */
    private _observeEvent;
    private _setupDefaultTransport;
    private _setUpLogging;
}
//# sourceMappingURL=nodeClient.d.ts.map